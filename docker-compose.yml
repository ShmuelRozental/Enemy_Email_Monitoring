
x-environment-variables: &default-env-vars
  KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  MONGO_URI: mongodb://root:1234@mongo:27017/email_monitor?authSource=admin
  KAFKA_TOPIC: all_emails
  MONGO_DB: email_monitor
  MONGO_COLLECTION: all_messages
services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOOKEEPER_CLIENT_PORT= 2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - my_network

  kafka:
    image: 'bitnami/kafka:latest'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_AUTHORIZER_CLASS_NAME=kafka.security.authorizer.AclAuthorizer
      - KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND="true"
      - KAFKA_SUPER_USERS=User:admin
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/kafka/9092 && echo 'Success' || echo 'Failure'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - my_network
  
  kafka-init:
    image: 'bitnami/kafka:latest'
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./init-topics.sh:/init-topics.sh
    entrypoint: ["bash", "/init-topics.sh"]
    networks:
      - my_network

  mongo:
    image: 'mongo:latest'
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=1234
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "mongosh", "--username", "root", "--password", "1234", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 5


  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_DB=email_monitor
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d email_monitor"]
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5

          

  email_router_producer:
    build: ./email_router_producer
    ports:
      - "5001:5001"
    environment:
      <<: *default-env-vars
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - my_network

  email_generator:
    build: ./email_generator
    ports:
      - "5000:5000"
    depends_on:
      - email_router_producer
    networks:
      - my_network

  suspicious_emails_processor:
    build: ./suspicious_emails_processor
    environment:
      <<: *default-env-vars
      SUSPICIOUS_KEYWORDS: '{"hostage": "messages.hostage", "explosive": "messages.explosive"}'
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - my_network

  emails_mdb_consumer:
    build: ./emails_mdb_consumer
    environment:
      <<: *default-env-vars
    depends_on:
      kafka:
          condition: service_healthy
      mongo:
          condition: service_healthy
      email_router_producer:
          condition: service_started
    networks:
      - my_network

  suspicious_email_consumer:
    build: ./suspicious_email_consumer  
    environment:
      <<: *default-env-vars
      DATABASE_URL: postgresql://postgres:1234@postgres/email_monitor
      SUSPICIOUS_KEYWORDS: '{"hostage": "messages.hostage", "explosive": "messages.explosive"}'
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - my_network


networks:
  my_network:
    driver: bridge
